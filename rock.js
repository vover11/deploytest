const express = require('express');
const fs = require('fs');
const path = require('path');
const TelegramBot = require('node-telegram-bot-api');
const mongoose = require('mongoose');

const app = express();
const port = 3000;

const dbPath = 'C:/data/db';
if (!fs.existsSync(dbPath)) {
    fs.mkdirSync(path.resolve(dbPath), { recursive: true });
}

app.use(express.static('C:/Users/–í–æ–≤/Desktop/MOPRH/Public'));

app.get('', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

app.listen(port, () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
});

mongoose.connect('mongodb://127.0.0.1:27017/rockpaperscissors', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

const { Schema } = mongoose;

const room2Schema = new mongoose.Schema({
    roomId: {
        type: String,
        required: true,
        unique: true,
    },
    participants: [
        {
            player: { type: mongoose.Schema.Types.ObjectId, ref: 'Player' },
            nick: String, // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ nick
            stakeAmount: Number,
            choice: { type: String, enum: ['rock', 'paper', 'scissors', 'waiting'], required: false },
        },
    ],
    stake: {
        type: Number,
        required: true,
    },
    availableSpots: {
        type: Number,
        required: true,
    },
});

const Room2 = mongoose.model('Room2', room2Schema);


// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ Player
const playerSchema = new Schema({
    userId: Number,
    nick: String,
    stakes: [
        {
            roomId: { type: Schema.Types.ObjectId, ref: 'Room2' },
            stakeAmount: Number,
            choice: { type: String, enum: ['rock', 'paper', 'scissors','waiting'], required: false }, // –ò–∑–º–µ–Ω–∏–ª–∏ –Ω–∞ required: false
        },
    ],
    points: Number,
    currentStep: String,
});

const Player = mongoose.model('Player', playerSchema);

const Winners = mongoose.model('Winner', {
    userId: Number,
    nick: String,
    stakeAmount: Number,
});



// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram Bot
const botToken = '6612857955:AAECtQdvDf8DnsM5BmBRcIjamXmjGEaiffY';
const bot = new TelegramBot(botToken, { polling: true });

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥
bot.onText(/–ù–∞–∑–∞–¥/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    const user = await Player.findOne({ userId });
    if (!user) {
        bot.sendMessage(chatId, '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.');
        return;
    }

    if (user.currentStep === 'buy_points') {
        await Player.updateOne({ userId }, { $set: { currentStep: 'main' } });
        sendMainKeyboard(chatId);
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≥–ª–∞–≤–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
function sendMainKeyboard(chatId) {
    const keyboard = {
        reply_markup: {
            keyboard: [
                ['–ò–≥—Ä–∞—Ç—åüïπÔ∏è'],
                ['–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏üèÜ'],
                ['–ö—É–ø–∏—Ç—å –ø–æ–∏–Ω—Ç—ãüíé']
            ],
            one_time_keyboard: false
        }
    };
    bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', keyboard);
}
const adminUserIds = ['486479899', '987654321'];

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ä—Ç–∞ –∏–≥—Ä—ã
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const isAdmin = adminUserIds.includes(userId.toString());

    let player = await Player.findOne({ userId });

    if (!player) {
        player = new Player({ userId, nick: msg.from.username, points: 0 });
        await player.save();
    }

    bot.sendMessage(chatId, ` –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${player.nick}!
    
    "–°–æ—Ä–µ–≤–Ω—É–π—Ç–µ—Å—å —Å –¥—Ä—É–∑—å—è–º–∏ –æ–Ω–ª–∞–π–Ω –≤ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–π –∏–≥—Ä–µ '–ö–∞–º–µ–Ω—å, –ù–æ–∂–Ω–∏—Ü—ã, –ë—É–º–∞–≥–∞'! –£–≥–∞–¥–∞–π—Ç–µ –∏—Ö –≤—ã–±–æ—Ä, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–æ–≤–∫–æ—Å—Ç—å –∏ –∏–Ω—Ç—É–∏—Ü–∏—é, —á—Ç–æ–±—ã –æ–¥–æ–ª–µ—Ç—å –≤—Å–µ—Ö. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å —Å–µ–π—á–∞—Å –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, –∫—Ç–æ –∏–∑ –≤–∞—Å –Ω–∞—Å—Ç–æ—è—â–∏–π –º–∞—Å—Ç–µ—Ä –≤ —ç—Ç–æ–π –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–µ–π –∏–≥—Ä–µ!"`);

    const keyboard = {
        reply_markup: {
            keyboard: [
                ['–ò–≥—Ä–∞—Ç—åüïπÔ∏è'],
                ['–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏üèÜ'],
                ['–ö—É–ø–∏—Ç—å –ø–æ–∏–Ω—Ç—ãüíé'],
                isAdmin ? ['–°–µ—Ä–≤–∏—Å–Ω—ã–µ –∫–æ–º–Ω–∞–¥—ã ‚öôÔ∏è'] : [],
            ],
            one_time_keyboard: false
        }
    };

    bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', keyboard);

    // –ü–æ–ª—É—á–∏—Ç–µ —Ç–µ–∫—É—â–∏–π —à–∞–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await Player.findOne({ userId });
    if (user) {
        // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ currentStep –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        await Player.updateOne({ userId }, { $set: { currentStep: 'main', previousStep: user.currentStep } });
    }
});

bot.onText(/–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏/, async (msg) => {
    const chatId = msg.chat.id;

    try {
        const winners = await Winners.find();
        if (winners.length === 0) {
            bot.sendMessage(chatId, '–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π.');
            return;
        }

        const winnersList = await Promise.all(winners.map(async winner => {
            const player = await Player.findOne({ userId: winner.userId });
            return `${winner.nick} - –°—Ç–∞–≤–∫–∞: ${winner.stakeAmount}`;
        }));

        const formattedWinnersList = winnersList.join('\n');
        bot.sendMessage(chatId, `–°–ø–∏—Å–æ–∫ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:\n\n${formattedWinnersList}`);
    } catch (error) {
        console.error(error);
        bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π.');
    }
});


// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ö—É–ø–∏—Ç—å –ø–æ–∏–Ω—Ç—ã
bot.onText(/–ö—É–ø–∏—Ç—å –ø–æ–∏–Ω—Ç—ã/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    const player = await Player.findOne({ userId });
    if (!player) {
        bot.sendMessage(chatId, '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.');
        return;
    }

    const keyboard = {
        reply_markup: {
            keyboard: [
                ['1pntüíé', '10pntüíé', '1000pntüíé'],
                ['–ù–∞–∑–∞–¥']
            ],
            one_time_keyboard: false
        }
    };

    bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∏–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:', keyboard);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥ –¥–ª—è –∏–≥—Ä–æ–∫–∞
    await Player.updateOne({ userId }, { $set: { currentStep: 'buy_points' } });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–∏–Ω—Ç–æ–≤
bot.onText(/^(1pntüíé|10pntüíé|1000pntüíé)$/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const pointsAmountText = match[1];

    let pointsAmount;
    if (pointsAmountText === '1pntüíé') {
        pointsAmount = 1;
    } else if (pointsAmountText === '10pntüíé') {
        pointsAmount = 10;
    } else if (pointsAmountText === '1000pntüíé') {
        pointsAmount = 1000;
    } else {
        // –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ —á—Ç–æ-—Ç–æ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–∏–Ω—Ç–æ–≤.');
        return;
    }

    const player = await Player.findOne({ userId });
    if (!player) {
        bot.sendMessage(chatId, '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.');
        return;
    }

    if (player.currentStep !== 'buy_points') {
        // –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ —Ç–µ–∫—É—â–∏–π —à–∞–≥ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–∫—É–ø–∫–µ –ø–æ–∏–Ω—Ç–æ–≤
        return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∏–Ω—Ç–æ–≤ –∏–≥—Ä–æ–∫–∞
    await Player.updateOne({ userId }, { $inc: { points: pointsAmount } });

    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const updatedPlayer = await Player.findOne({ userId });

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    bot.sendMessage(chatId, `–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ ${pointsAmount} –ø–æ–∏–Ω—Ç–æ–≤. –¢–µ–ø–µ—Ä—å —É –≤–∞—Å ${updatedPlayer.points} –ø–æ–∏–Ω—Ç–æ–≤.`);
});

function generateRoomId() {
    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    const length = 8;
    let result = '';
    for (let i = 0; i < length; i++) {
        result += characters.charAt(Math.floor(Math.random() * characters.length));
    }
    return result;
}



bot.onText(/–ò–≥—Ä–∞—Ç—å/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    const player = await Player.findOne({ userId });

    const keyboard = {
        reply_markup: {
            keyboard: [
                ['–°—Ç–∞–≤–∫–∞ 10', '–°—Ç–∞–≤–∫–∞ 100', '–°—Ç–∞–≤–∫–∞ 500'],
                ['–ù–∞–∑–∞–¥']
            ],
            one_time_keyboard: false
        }
    };
    bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', keyboard);

});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–≤–∫–∏
bot.onText(/^(–°—Ç–∞–≤–∫–∞ 10|–°—Ç–∞–≤–∫–∞ 100|–°—Ç–∞–≤–∫–∞ 500)$/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const player = await Player.findOne({ userId });

    if (!player) {
        bot.sendMessage(chatId, '–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É —Å –∫–æ–º–∞–Ω–¥—ã /start.');
        return;
    }

    const stakeText = match[1];
    const stakeAmount = parseInt(stakeText.split(' ')[1]);

    if (player.points < stakeAmount) {
        bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–∏–Ω—Ç–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç–∞–≤–∫–∏.');
        return;
    }

    const existingStake = player.stakes.find(stake => stake.stakeAmount === stakeAmount);
    if (existingStake) {
        bot.sendMessage(chatId, '–í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ —Å—Ç–∞–≤–∫—É –Ω–∞ –¥–∞–Ω–Ω—É—é —Å—É–º–º—É.');
        return;
    }

    let room = await Room2.findOne({ stake: stakeAmount, availableSpots: { $gt: 0 } });

    if (!room) {
        room = await Room2.findOne({ stake: stakeAmount, availableSpots: 1 });

        if (room) {
            const existingRoomWithSpot = room.participants.find(p => !p.player && p.stakeAmount === stakeAmount);

            if (existingRoomWithSpot) {
                existingRoomWithSpot.player = player._id;
                existingRoomWithSpot.choice = 'waiting';
            } else {
                room.participants.push({
                    player: player._id,
                    stakeAmount: stakeAmount,
                    choice: 'waiting',
                });
                room.availableSpots -= 1;
            }
        } else {
            room = new Room2({
                roomId: generateRoomId(),
                participants: [{
                    player: player._id,
                    stakeAmount: stakeAmount,
                    choice: 'waiting',
                }],
                stake: stakeAmount,
                availableSpots: 1,
            });
        }
    } else {
        const existingRoomWithSpot = room.participants.find(p => !p.player && p.stakeAmount === stakeAmount);

        if (existingRoomWithSpot) {
            existingRoomWithSpot.player = player._id;
            existingRoomWithSpot.choice = 'waiting';
        } else {
            if (room.availableSpots === 0) {
                bot.sendMessage(chatId, '–í —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ —É–∂–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Å—Ç–∞–≤–∫—É.');
                return;
            }

            room.participants.push({
                player: player._id,
                stakeAmount: stakeAmount,
                choice: 'waiting',
            });
            room.availableSpots -= 1;
        }
    }

    player.stakes.push({
        roomId: room._id,
        stakeAmount: stakeAmount,
    });

    player.points -= stakeAmount;
    await Promise.all([room.save(), player.save()]);

    bot.sendMessage(userId, `–° –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞ —Å–ø–∏—Å–∞–Ω–æ ${stakeAmount} –ø–æ–∏–Ω—Ç–æ–≤. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${player.points} –ø–æ–∏–Ω—Ç–æ–≤`);

    const options = [
        { text: 'üóø –ö–∞–º–µ–Ω—å', callback_data: `${room._id} rock` },
        { text: '‚úÇÔ∏è –ù–æ–∂–Ω–∏—Ü—ã', callback_data: `${room._id} scissors` },
        { text: 'üßª –ë—É–º–∞–≥–∞', callback_data: `${room._id} paper` },
    ];
    const keyboard = {
        inline_keyboard: [options],
    };

    bot.sendMessage(chatId, `–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å—Ç–∞–≤–∫—É ${stakeAmount} –ø–æ–∏–Ω—Ç–æ–≤. –û–∂–∏–¥–∞–µ–º –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤.`, { reply_markup: keyboard });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–∞ "–∫–∞–º–µ–Ω—å", "–Ω–æ–∂–Ω–∏—Ü—ã" –∏–ª–∏ "–±—É–º–∞–≥–∞"
bot.on('callback_query', async (query) => {
    const chatId = query.message.chat.id;
    const userId = query.from.id;
    const [roomId, choice] = query.data.split(' ');

    const player = await Player.findOne({ userId });

    if (!player) {
        bot.sendMessage(chatId, '–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É —Å –∫–æ–º–∞–Ω–¥—ã /start.');
        return;
    }

    const roomChoice = player.stakes.find(stake => stake.roomId.toString() === roomId);
    if (!roomChoice) {
        bot.sendMessage(chatId, '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –≤—ã–±–æ—Ä –¥–ª—è —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç—ã.');
        return;
    }

    roomChoice.choice = choice;
    await player.save();

    bot.sendMessage(chatId, `–í—ã –≤—ã–±—Ä–∞–ª–∏: ${choice}. –û–∂–∏–¥–∞–µ–º –≤—ã–±–æ—Ä –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞...`);

    const room = await Room2.findById(roomId);

    const participantIndexInRoom = room.participants.findIndex(p => p.player.toString() === player._id.toString());
    if (participantIndexInRoom !== -1) {
        room.participants[participantIndexInRoom].choice = choice;
        room.participants[participantIndexInRoom].nick = player.nick; // –î–æ–±–∞–≤–ª—è–µ–º nick –∏–∑ Player
        await room.save();

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—Ç
        // room.availableSpots -= 1;
        await room.save();
    } else {
        console.log("–û—à–∏–±–∫–∞: –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–º–Ω–∞—Ç–µ.");
    }

    if (room.participants.every(p => p.stakeAmount && p.choice)) {
        if (room.participants.length !== 2) {
            bot.sendMessage(chatId, '–í –∫–æ–º–Ω–∞—Ç–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–≤–∞ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã.');
            return;
        }

        const choices = room.participants.map(p => p.choice);

        if (choices.includes('waiting')) {
            bot.sendMessage(chatId, '–û–¥–∏–Ω –∏–∑ –∏–≥—Ä–æ–∫–æ–≤ –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–ª –≤—ã–±–æ—Ä. –û–∂–∏–¥–∞–µ–º...');
            return;
        }

        let resultMessage = '';
        let winningParticipantIndex;

        if (choices[0] === choices[1]) {
            resultMessage = '–ù–∏—á—å—è!';
        } else if (
            (choices[0] === 'rock' && choices[1] === 'scissors') ||
            (choices[0] === 'scissors' && choices[1] === 'paper') ||
            (choices[0] === 'paper' && choices[1] === 'rock')
        ) {
            resultMessage = `${room.participants[0].nick} –ø–æ–±–µ–¥–∏–ª!`; // –ò—Å–ø–æ–ª—å–∑—É–µ–º nick –∏–∑ Room2
            winningParticipantIndex = 0;
        } else {
            resultMessage = `${room.participants[1].nick} –ø–æ–±–µ–¥–∏–ª!`; // –ò—Å–ø–æ–ª—å–∑—É–µ–º nick –∏–∑ Room2
            winningParticipantIndex = 1;
        }

        for (const p of room.participants) {
            const playerToUpdate = await Player.findById(p.player);
            bot.sendMessage(playerToUpdate.userId, resultMessage);
            playerToUpdate.choice = null;
            await playerToUpdate.save();
        }

        if (winningParticipantIndex !== undefined) {
            const winningPlayer = await Player.findById(room.participants[winningParticipantIndex].player);
            if (winningPlayer) {
                winningPlayer.points += room.stake * 2;
                await winningPlayer.save();
                bot.sendMessage(winningPlayer.userId, `–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${room.stake * 2} –ø–æ–∏–Ω—Ç–æ–≤. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${winningPlayer.points} –ø–æ–∏–Ω—Ç–æ–≤`);

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                await Winners.create({
                    userId: winningPlayer.userId,
                    nick: winningPlayer.nick,
                    stakeAmount: room.stake,
                });
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç–µ –≤ –¥—Ä—É–≥–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª
                await servicecall(room._id, room.participants.map(p => p.nick), room.stake, room.availableSpots,);
            } else {
                console.error(`–û—à–∏–±–∫–∞: –ò–≥—Ä–æ–∫ —Å ID ${room.participants[winningParticipantIndex].player} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
            }
        }

        // –ü–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –∫–æ–º–Ω–∞—Ç—ã
        const roomToDelete = await Room2.findById(room._id);

        // –û—á–∏—â–∞–µ–º —Å—Ç–∞–≤–∫–∏ —É –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–Ω–∞—Ç—ã
        for (const participant of roomToDelete.participants) {
            const playerToUpdate = await Player.findById(participant.player);
            if (playerToUpdate) {
                const stakeIndex = playerToUpdate.stakes.findIndex(stake => stake.roomId.toString() === roomToDelete._id.toString());
                if (stakeIndex !== -1) {
                    playerToUpdate.stakes.splice(stakeIndex, 1); // –£–¥–∞–ª—è–µ–º —Å—Ç–∞–≤–∫—É
                    await playerToUpdate.save();
                }
            }
        }

        // –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º —Å–∞–º—É –∫–æ–º–Ω–∞—Ç—É
        await Room2.findByIdAndRemove(room._id);
    } else {
        const options = [
            { text: '–ö–∞–º–µ–Ω—å', callback_data: `${roomId} rock` },
            { text: '–ù–æ–∂–Ω–∏—Ü—ã', callback_data: `${roomId} scissors` },
            { text: '–ë—É–º–∞–≥–∞', callback_data: `${roomId} paper` },
        ];
        const keyboard = {
            inline_keyboard: [options],
        };
        bot.sendMessage(userId, '–í—ã –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–ª–∏ –≤—ã–±–æ—Ä. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:', { reply_markup: keyboard });
    }
});
const axios = require('axios');

async function servicecall(roomId, participants, stake, availableSpots) {
    const token = '6612857955:AAECtQdvDf8DnsM5BmBRcIjamXmjGEaiffY'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    const chatId = '@wintechservice'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∏–º—è –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞

    const message = `–ù–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞ —Ä–∞–∑–≥—Ä–∞–Ω–∞!\n\nID: ${roomId}\n–£—á–∞—Å—Ç–Ω–∏–∫–∏: ${participants}\n–°—Ç–∞–≤–∫–∞: ${stake}\n–°–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞: ${availableSpots}`;

    const apiUrl = `https://api.telegram.org/bot${token}/sendMessage?chat_id=${chatId}`;


    try {
        const response = await axios.post(apiUrl, {
            chat_id: chatId,
            text: message
        });

        console.log('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', response.data);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
}









// const express = require('express');
// const fs = require('fs');
// const path = require('path');
// const TelegramBot = require('node-telegram-bot-api');
// const mongoose = require('mongoose');

// const app = express();
// const port = 3000;

// const dbPath = 'C:/data/db';
// if (!fs.existsSync(dbPath)) {
//     fs.mkdirSync(path.resolve(dbPath), { recursive: true });
// }

// app.use(express.static('C:/Users/–í–æ–≤/Desktop/MOPRH/Public'));

// app.get('', (req, res) => {
//     res.sendFile(path.join(__dirname, 'index.html'));
// });

// app.listen(port, () => {
//     console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
// });

// mongoose.connect('mongodb://127.0.0.1:27017/rockpaperscissors', {
//     useNewUrlParser: true,
//     useUnifiedTopology: true,
// });

// const { Schema } = mongoose;

// const room2Schema = new mongoose.Schema({
//     roomId: {
//         type: String,
//         required: true,
//         unique: true,
//     },
//     participants: [
//         {
//             player: { type: mongoose.Schema.Types.ObjectId, ref: 'Player' },
//             nick: String, // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ nick
//             stakeAmount: Number,
//             choice: { type: String, enum: ['rock', 'paper', 'scissors', 'waiting'], required: false },
//         },
//     ],
//     stake: {
//         type: Number,
//         required: true,
//     },
//     availableSpots: {
//         type: Number,
//         required: true,
//     },
// });

// const Room2 = mongoose.model('Room2', room2Schema);


// // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ Player
// const playerSchema = new Schema({
//     userId: Number,
//     nick: String,
//     stakes: [
//         {
//             roomId: { type: Schema.Types.ObjectId, ref: 'Room2' },
//             stakeAmount: Number,
//             choice: { type: String, enum: ['rock', 'paper', 'scissors','waiting'], required: false }, // –ò–∑–º–µ–Ω–∏–ª–∏ –Ω–∞ required: false
//         },
//     ],
//     points: Number,
//     currentStep: String,
// });

// const Player = mongoose.model('Player', playerSchema);

// const Winners = mongoose.model('Winner', {
//     userId: Number,
//     nick: String,
//     stakeAmount: Number,
// });



// // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram Bot
// const botToken = '6612857955:AAECtQdvDf8DnsM5BmBRcIjamXmjGEaiffY';
// const bot = new TelegramBot(botToken, { polling: true });

// // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥
// bot.onText(/–ù–∞–∑–∞–¥/, async (msg) => {
//     const chatId = msg.chat.id;
//     const userId = msg.from.id;

//     const user = await Player.findOne({ userId });
//     if (!user) {
//         bot.sendMessage(chatId, '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.');
//         return;
//     }

//     if (user.currentStep === 'buy_points') {
//         await Player.updateOne({ userId }, { $set: { currentStep: 'main' } });
//         sendMainKeyboard(chatId);
//     }
// });

// // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≥–ª–∞–≤–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
// function sendMainKeyboard(chatId) {
//     const keyboard = {
//         reply_markup: {
//             keyboard: [
//                 ['–ò–≥—Ä–∞—Ç—åüïπÔ∏è'],
//                 ['–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏üèÜ'],
//                 ['–ö—É–ø–∏—Ç—å –ø–æ–∏–Ω—Ç—ãüíé']
//             ],
//             one_time_keyboard: false
//         }
//     };
//     bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', keyboard);
// }

// // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ä—Ç–∞ –∏–≥—Ä—ã
// bot.onText(/\/start/, async (msg) => {
//     const chatId = msg.chat.id;
//     const userId = msg.from.id;

//     let player = await Player.findOne({ userId });

//     if (!player) {
//         player = new Player({ userId, nick: msg.from.username, points: 0 });
//         await player.save();
//     }

//     bot.sendMessage(chatId, `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${player.nick}!`);

//     const keyboard = {
//         reply_markup: {
//             keyboard: [
//                 ['–ò–≥—Ä–∞—Ç—åüïπÔ∏è'],
//                 ['–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏üèÜ'],
//                 ['–ö—É–ø–∏—Ç—å –ø–æ–∏–Ω—Ç—ãüíé'],
//             ],
//             one_time_keyboard: false
//         }
//     };

//     bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', keyboard);

//     // –ü–æ–ª—É—á–∏—Ç–µ —Ç–µ–∫—É—â–∏–π —à–∞–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
//     const user = await Player.findOne({ userId });
//     if (user) {
//         // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ currentStep –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
//         await Player.updateOne({ userId }, { $set: { currentStep: 'main', previousStep: user.currentStep } });
//     }
// });

// bot.onText(/–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏/, async (msg) => {
//     const chatId = msg.chat.id;

//     try {
//         const winners = await Winners.find();
//         if (winners.length === 0) {
//             bot.sendMessage(chatId, '–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π.');
//             return;
//         }

//         const winnersList = await Promise.all(winners.map(async winner => {
//             const player = await Player.findOne({ userId: winner.userId });
//             return `${winner.nick} - –°—Ç–∞–≤–∫–∞: ${winner.stakeAmount}`;
//         }));

//         const formattedWinnersList = winnersList.join('\n');
//         bot.sendMessage(chatId, `–°–ø–∏—Å–æ–∫ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:\n\n${formattedWinnersList}`);
//     } catch (error) {
//         console.error(error);
//         bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π.');
//     }
// });


// // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ö—É–ø–∏—Ç—å –ø–æ–∏–Ω—Ç—ã
// bot.onText(/–ö—É–ø–∏—Ç—å –ø–æ–∏–Ω—Ç—ã/, async (msg) => {
//     const chatId = msg.chat.id;
//     const userId = msg.from.id;

//     const player = await Player.findOne({ userId });
//     if (!player) {
//         bot.sendMessage(chatId, '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.');
//         return;
//     }

//     const keyboard = {
//         reply_markup: {
//             keyboard: [
//                 ['1pntüíé', '10pntüíé', '1000pntüíé'],
//                 ['–ù–∞–∑–∞–¥']
//             ],
//             one_time_keyboard: false
//         }
//     };

//     bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∏–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:', keyboard);

//     // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥ –¥–ª—è –∏–≥—Ä–æ–∫–∞
//     await Player.updateOne({ userId }, { $set: { currentStep: 'buy_points' } });
// });

// // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–∏–Ω—Ç–æ–≤
// bot.onText(/^(1pntüíé|10pntüíé|1000pntüíé)$/, async (msg, match) => {
//     const chatId = msg.chat.id;
//     const userId = msg.from.id;
//     const pointsAmountText = match[1];

//     let pointsAmount;
//     if (pointsAmountText === '1pntüíé') {
//         pointsAmount = 1;
//     } else if (pointsAmountText === '10pntüíé') {
//         pointsAmount = 10;
//     } else if (pointsAmountText === '1000pntüíé') {
//         pointsAmount = 1000;
//     } else {
//         // –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ —á—Ç–æ-—Ç–æ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
//         bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–∏–Ω—Ç–æ–≤.');
//         return;
//     }

//     const player = await Player.findOne({ userId });
//     if (!player) {
//         bot.sendMessage(chatId, '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.');
//         return;
//     }

//     if (player.currentStep !== 'buy_points') {
//         // –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ —Ç–µ–∫—É—â–∏–π —à–∞–≥ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–∫—É–ø–∫–µ –ø–æ–∏–Ω—Ç–æ–≤
//         return;
//     }

//     // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∏–Ω—Ç–æ–≤ –∏–≥—Ä–æ–∫–∞
//     await Player.updateOne({ userId }, { $inc: { points: pointsAmount } });

//     // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
//     const updatedPlayer = await Player.findOne({ userId });

//     // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
//     bot.sendMessage(chatId, `–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ ${pointsAmount} –ø–æ–∏–Ω—Ç–æ–≤. –¢–µ–ø–µ—Ä—å —É –≤–∞—Å ${updatedPlayer.points} –ø–æ–∏–Ω—Ç–æ–≤.`);
// });

// function generateRoomId() {
//     const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
//     const length = 8;
//     let result = '';
//     for (let i = 0; i < length; i++) {
//         result += characters.charAt(Math.floor(Math.random() * characters.length));
//     }
//     return result;
// }



// bot.onText(/–ò–≥—Ä–∞—Ç—å/, async (msg) => {
//     const chatId = msg.chat.id;
//     const userId = msg.from.id;

//     const player = await Player.findOne({ userId });

//     const keyboard = {
//         reply_markup: {
//             keyboard: [
//                 ['–°—Ç–∞–≤–∫–∞ 10', '–°—Ç–∞–≤–∫–∞ 100', '–°—Ç–∞–≤–∫–∞ 500'],
//                 ['–ù–∞–∑–∞–¥']
//             ],
//             one_time_keyboard: false
//         }
//     };
//     bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', keyboard);

// });

// // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–≤–∫–∏
// bot.onText(/^(–°—Ç–∞–≤–∫–∞ 10|–°—Ç–∞–≤–∫–∞ 100|–°—Ç–∞–≤–∫–∞ 500)$/, async (msg, match) => {
//     const chatId = msg.chat.id;
//     const userId = msg.from.id;
//     const player = await Player.findOne({ userId });

//     if (!player) {
//         bot.sendMessage(chatId, '–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É —Å –∫–æ–º–∞–Ω–¥—ã /start.');
//         return;
//     }

//     const stakeText = match[1];
//     const stakeAmount = parseInt(stakeText.split(' ')[1]);

//     if (player.points < stakeAmount) {
//         bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–∏–Ω—Ç–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç–∞–≤–∫–∏.');
//         return;
//     }

//     const existingStake = player.stakes.find(stake => stake.stakeAmount === stakeAmount);
//     if (existingStake) {
//         bot.sendMessage(chatId, '–í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ —Å—Ç–∞–≤–∫—É –Ω–∞ –¥–∞–Ω–Ω—É—é —Å—É–º–º—É.');
//         return;
//     }

//     let room = await Room2.findOne({ stake: stakeAmount, availableSpots: { $gt: 0 } });

//     if (!room) {
//         room = await Room2.findOne({ stake: stakeAmount, availableSpots: 1 });

//         if (room) {
//             const existingRoomWithSpot = room.participants.find(p => !p.player && p.stakeAmount === stakeAmount);

//             if (existingRoomWithSpot) {
//                 existingRoomWithSpot.player = player._id;
//                 existingRoomWithSpot.choice = 'waiting';
//             } else {
//                 room.participants.push({
//                     player: player._id,
//                     stakeAmount: stakeAmount,
//                     choice: 'waiting',
//                 });
//                 room.availableSpots -= 1;
//             }
//         } else {
//             room = new Room2({
//                 roomId: generateRoomId(),
//                 participants: [{
//                     player: player._id,
//                     stakeAmount: stakeAmount,
//                     choice: 'waiting',
//                 }],
//                 stake: stakeAmount,
//                 availableSpots: 1,
//             });
//         }
//     } else {
//         const existingRoomWithSpot = room.participants.find(p => !p.player && p.stakeAmount === stakeAmount);

//         if (existingRoomWithSpot) {
//             existingRoomWithSpot.player = player._id;
//             existingRoomWithSpot.choice = 'waiting';
//         } else {
//             if (room.availableSpots === 0) {
//                 bot.sendMessage(chatId, '–í —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ —É–∂–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Å—Ç–∞–≤–∫—É.');
//                 return;
//             }

//             room.participants.push({
//                 player: player._id,
//                 stakeAmount: stakeAmount,
//                 choice: 'waiting',
//             });
//             room.availableSpots -= 1;
//         }
//     }

//     player.stakes.push({
//         roomId: room._id,
//         stakeAmount: stakeAmount,
//     });

//     player.points -= stakeAmount;
//     await Promise.all([room.save(), player.save()]);

//     bot.sendMessage(userId, `–° –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞ —Å–ø–∏—Å–∞–Ω–æ ${stakeAmount} –ø–æ–∏–Ω—Ç–æ–≤. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${player.points} –ø–æ–∏–Ω—Ç–æ–≤`);

//     const options = [
//         { text: '–ö–∞–º–µ–Ω—å', callback_data: `${room._id} rock` },
//         { text: '–ù–æ–∂–Ω–∏—Ü—ã', callback_data: `${room._id} scissors` },
//         { text: '–ë—É–º–∞–≥–∞', callback_data: `${room._id} paper` },
//     ];
//     const keyboard = {
//         inline_keyboard: [options],
//     };

//     bot.sendMessage(chatId, `–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å—Ç–∞–≤–∫—É ${stakeAmount} –ø–æ–∏–Ω—Ç–æ–≤. –û–∂–∏–¥–∞–µ–º –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤.`, { reply_markup: keyboard });
// });

// // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–∞ "–∫–∞–º–µ–Ω—å", "–Ω–æ–∂–Ω–∏—Ü—ã" –∏–ª–∏ "–±—É–º–∞–≥–∞"
// bot.on('callback_query', async (query) => {
//     const chatId = query.message.chat.id;
//     const userId = query.from.id;
//     const [roomId, choice] = query.data.split(' ');

//     const player = await Player.findOne({ userId });

//     if (!player) {
//         bot.sendMessage(chatId, '–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É —Å –∫–æ–º–∞–Ω–¥—ã /start.');
//         return;
//     }

//     const roomChoice = player.stakes.find(stake => stake.roomId.toString() === roomId);
//     if (!roomChoice) {
//         bot.sendMessage(chatId, '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –≤—ã–±–æ—Ä –¥–ª—è —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç—ã.');
//         return;
//     }

//     roomChoice.choice = choice;
//     await player.save();

//     bot.sendMessage(chatId, `–í—ã –≤—ã–±—Ä–∞–ª–∏: ${choice}. –û–∂–∏–¥–∞–µ–º –≤—ã–±–æ—Ä –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞...`);

//     const room = await Room2.findById(roomId);

//     const participantIndexInRoom = room.participants.findIndex(p => p.player.toString() === player._id.toString());
//     if (participantIndexInRoom !== -1) {
//         room.participants[participantIndexInRoom].choice = choice;
//         room.participants[participantIndexInRoom].nick = player.nick; // –î–æ–±–∞–≤–ª—è–µ–º nick –∏–∑ Player
//         await room.save();

//         // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—Ç
//         // room.availableSpots -= 1;
//         await room.save();
//     } else {
//         console.log("–û—à–∏–±–∫–∞: –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–º–Ω–∞—Ç–µ.");
//     }

//     if (room.participants.every(p => p.stakeAmount && p.choice)) {
//         if (room.participants.length !== 2) {
//             bot.sendMessage(chatId, '–í –∫–æ–º–Ω–∞—Ç–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–≤–∞ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã.');
//             return;
//         }

//         const choices = room.participants.map(p => p.choice);

//         if (choices.includes('waiting')) {
//             bot.sendMessage(chatId, '–û–¥–∏–Ω –∏–∑ –∏–≥—Ä–æ–∫–æ–≤ –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–ª –≤—ã–±–æ—Ä. –û–∂–∏–¥–∞–µ–º...');
//             return;
//         }

//         let resultMessage = '';
//         let winningParticipantIndex;

//         if (choices[0] === choices[1]) {
//             resultMessage = '–ù–∏—á—å—è!';
//         } else if (
//             (choices[0] === 'rock' && choices[1] === 'scissors') ||
//             (choices[0] === 'scissors' && choices[1] === 'paper') ||
//             (choices[0] === 'paper' && choices[1] === 'rock')
//         ) {
//             resultMessage = `${room.participants[0].nick} –ø–æ–±–µ–¥–∏–ª!`; // –ò—Å–ø–æ–ª—å–∑—É–µ–º nick –∏–∑ Room2
//             winningParticipantIndex = 0;
//         } else {
//             resultMessage = `${room.participants[1].nick} –ø–æ–±–µ–¥–∏–ª!`; // –ò—Å–ø–æ–ª—å–∑—É–µ–º nick –∏–∑ Room2
//             winningParticipantIndex = 1;
//         }

//         for (const p of room.participants) {
//             const playerToUpdate = await Player.findById(p.player);
//             bot.sendMessage(playerToUpdate.userId, resultMessage);
//             playerToUpdate.choice = null;
//             await playerToUpdate.save();
//         }

//         if (winningParticipantIndex !== undefined) {
//             const winningPlayer = await Player.findById(room.participants[winningParticipantIndex].player);
//             if (winningPlayer) {
//                 winningPlayer.points += room.stake * 2;
//                 await winningPlayer.save();
//                 bot.sendMessage(winningPlayer.userId, `–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${room.stake * 2} –ø–æ–∏–Ω—Ç–æ–≤. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${winningPlayer.points} –ø–æ–∏–Ω—Ç–æ–≤`);

//                 // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
//                 await Winners.create({
//                     userId: winningPlayer.userId,
//                     nick: winningPlayer.nick,
//                     stakeAmount: room.stake,
//                 });
//                 // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç–µ –≤ –¥—Ä—É–≥–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª
//                 await servicecall(room._id, room.participants.map(p => p.nick), room.stake, room.availableSpots);
//             } else {
//                 console.error(`–û—à–∏–±–∫–∞: –ò–≥—Ä–æ–∫ —Å ID ${room.participants[winningParticipantIndex].player} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
//             }
//         }

//         // –ü–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –∫–æ–º–Ω–∞—Ç—ã
//         const roomToDelete = await Room2.findById(room._id);

//         // –û—á–∏—â–∞–µ–º —Å—Ç–∞–≤–∫–∏ —É –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–Ω–∞—Ç—ã
//         for (const participant of roomToDelete.participants) {
//             const playerToUpdate = await Player.findById(participant.player);
//             if (playerToUpdate) {
//                 const stakeIndex = playerToUpdate.stakes.findIndex(stake => stake.roomId.toString() === roomToDelete._id.toString());
//                 if (stakeIndex !== -1) {
//                     playerToUpdate.stakes.splice(stakeIndex, 1); // –£–¥–∞–ª—è–µ–º —Å—Ç–∞–≤–∫—É
//                     await playerToUpdate.save();
//                 }
//             }
//         }

//         // –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º —Å–∞–º—É –∫–æ–º–Ω–∞—Ç—É
//         await Room2.findByIdAndRemove(room._id);
//     } else {
//         const options = [
//             { text: '–ö–∞–º–µ–Ω—å', callback_data: `${roomId} rock` },
//             { text: '–ù–æ–∂–Ω–∏—Ü—ã', callback_data: `${roomId} scissors` },
//             { text: '–ë—É–º–∞–≥–∞', callback_data: `${roomId} paper` },
//         ];
//         const keyboard = {
//             inline_keyboard: [options],
//         };
//         bot.sendMessage(userId, '–í—ã –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–ª–∏ –≤—ã–±–æ—Ä. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:', { reply_markup: keyboard });
//     }
// });
// const axios = require('axios');

// async function servicecall(roomId, participants, stake, availableSpots) {
//     const token = '6612857955:AAECtQdvDf8DnsM5BmBRcIjamXmjGEaiffY'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
//     const chatId = '@wintechservice'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∏–º—è –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞

//     const message = `–ù–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\nID: ${roomId}\n–£—á–∞—Å—Ç–Ω–∏–∫–∏: ${participants}\n–°—Ç–∞–≤–∫–∞: ${stake}\n–°–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞: ${availableSpots}`;

//     const apiUrl = `https://api.telegram.org/bot${token}/sendMessage?chat_id=${chatId}`;


//     try {
//         const response = await axios.post(apiUrl, {
//             chat_id: chatId,
//             text: message
//         });

//         console.log('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', response.data);
//     } catch (error) {
//         console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
//     }
// }





// const express = require('express');
// const fs = require('fs');
// const path = require('path');
// const TelegramBot = require('node-telegram-bot-api');
// const mongoose = require('mongoose');

// const app = express();
// const port = 3000;

// const dbPath = 'C:/data/db';
// if (!fs.existsSync(dbPath)) {
//     fs.mkdirSync(path.resolve(dbPath), { recursive: true });
// }

// app.use(express.static('C:/Users/–í–æ–≤/Desktop/MOPRH/Public'));

// app.get('', (req, res) => {
//     res.sendFile(path.join(__dirname, 'index.html'));
// });

// app.listen(port, () => {
//     console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
// });

// mongoose.connect('mongodb://127.0.0.1:27017/rockpaperscissors', {
//     useNewUrlParser: true,
//     useUnifiedTopology: true,
// });

// const { Schema } = mongoose;

// const room2Schema = new mongoose.Schema({
//     roomId: {
//         type: String,
//         required: true,
//         unique: true,
//     },
//     participants: [
//         {
//             player: { type: mongoose.Schema.Types.ObjectId, ref: 'Player' },
//             nick: String, // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ nick
//             stakeAmount: Number,
//             choice: { type: String, enum: ['rock', 'paper', 'scissors'], required: false },
//         },
//     ],
//     stake: {
//         type: Number,
//         required: true,
//     },
//     availableSpots: {
//         type: Number,
//         required: true,
//     },
// });

// const Room2 = mongoose.model('Room2', room2Schema);


// // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ Player
// const playerSchema = new Schema({
//     userId: Number,
//     nick: String,
//     stakes: [
//         {
//             roomId: { type: Schema.Types.ObjectId, ref: 'Room2' },
//             stakeAmount: Number,
//             choice: { type: String, enum: ['rock', 'paper', 'scissors'], required: false }, // –ò–∑–º–µ–Ω–∏–ª–∏ –Ω–∞ required: false
//         },
//     ],
//     points: Number,
//     currentStep: String,
// });

// const Player = mongoose.model('Player', playerSchema);

// const Winners = mongoose.model('Winner', {
//     userId: Number,
//     nick: String,
//     stakeAmount: Number,
// });



// // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram Bot
// const botToken = '6612857955:AAECtQdvDf8DnsM5BmBRcIjamXmjGEaiffY';
// const bot = new TelegramBot(botToken, { polling: true });

// // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥
// bot.onText(/–ù–∞–∑–∞–¥/, async (msg) => {
//     const chatId = msg.chat.id;
//     const userId = msg.from.id;

//     const user = await Player.findOne({ userId });
//     if (!user) {
//         bot.sendMessage(chatId, '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.');
//         return;
//     }

//     if (user.currentStep === 'buy_points') {
//         await Player.updateOne({ userId }, { $set: { currentStep: 'main' } });
//         sendMainKeyboard(chatId);
//     }
// });

// // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≥–ª–∞–≤–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
// function sendMainKeyboard(chatId) {
//     const keyboard = {
//         reply_markup: {
//             keyboard: [
//                 ['–ò–≥—Ä–∞—Ç—åüïπÔ∏è'],
//                 ['–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏üèÜ'],
//                 ['–ö—É–ø–∏—Ç—å –ø–æ–∏–Ω—Ç—ãüíé']
//             ],
//             one_time_keyboard: false
//         }
//     };
//     bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', keyboard);
// }

// // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ä—Ç–∞ –∏–≥—Ä—ã
// bot.onText(/\/start/, async (msg) => {
//     const chatId = msg.chat.id;
//     const userId = msg.from.id;

//     let player = await Player.findOne({ userId });

//     if (!player) {
//         player = new Player({ userId, nick: msg.from.username, points: 0 });
//         await player.save();
//     }

//     bot.sendMessage(chatId, `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${player.nick}!`);

//     const keyboard = {
//         reply_markup: {
//             keyboard: [
//                 ['–ò–≥—Ä–∞—Ç—åüïπÔ∏è'],
//                 ['–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏üèÜ'],
//                 ['–ö—É–ø–∏—Ç—å –ø–æ–∏–Ω—Ç—ãüíé'],
//             ],
//             one_time_keyboard: false
//         }
//     };

//     bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', keyboard);

//     // –ü–æ–ª—É—á–∏—Ç–µ —Ç–µ–∫—É—â–∏–π —à–∞–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
//     const user = await Player.findOne({ userId });
//     if (user) {
//         // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ currentStep –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
//         await Player.updateOne({ userId }, { $set: { currentStep: 'main', previousStep: user.currentStep } });
//     }
// });

// bot.onText(/–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏/, async (msg) => {
//     const chatId = msg.chat.id;

//     try {
//         const winners = await Winners.find();
//         if (winners.length === 0) {
//             bot.sendMessage(chatId, '–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π.');
//             return;
//         }

//         const winnersList = await Promise.all(winners.map(async winner => {
//             const player = await Player.findOne({ userId: winner.userId });
//             return `${winner.nick} - –°—Ç–∞–≤–∫–∞: ${winner.stakeAmount}`;
//         }));

//         const formattedWinnersList = winnersList.join('\n');
//         bot.sendMessage(chatId, `–°–ø–∏—Å–æ–∫ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:\n\n${formattedWinnersList}`);
//     } catch (error) {
//         console.error(error);
//         bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π.');
//     }
// });


// // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ö—É–ø–∏—Ç—å –ø–æ–∏–Ω—Ç—ã
// bot.onText(/–ö—É–ø–∏—Ç—å –ø–æ–∏–Ω—Ç—ã/, async (msg) => {
//     const chatId = msg.chat.id;
//     const userId = msg.from.id;

//     const player = await Player.findOne({ userId });
//     if (!player) {
//         bot.sendMessage(chatId, '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.');
//         return;
//     }

//     const keyboard = {
//         reply_markup: {
//             keyboard: [
//                 ['1pntüíé', '10pntüíé', '1000pntüíé'],
//                 ['–ù–∞–∑–∞–¥']
//             ],
//             one_time_keyboard: false
//         }
//     };

//     bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∏–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:', keyboard);

//     // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥ –¥–ª—è –∏–≥—Ä–æ–∫–∞
//     await Player.updateOne({ userId }, { $set: { currentStep: 'buy_points' } });
// });

// // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–∏–Ω—Ç–æ–≤
// bot.onText(/^(1pntüíé|10pntüíé|1000pntüíé)$/, async (msg, match) => {
//     const chatId = msg.chat.id;
//     const userId = msg.from.id;
//     const pointsAmountText = match[1];

//     let pointsAmount;
//     if (pointsAmountText === '1pntüíé') {
//         pointsAmount = 1;
//     } else if (pointsAmountText === '10pntüíé') {
//         pointsAmount = 10;
//     } else if (pointsAmountText === '1000pntüíé') {
//         pointsAmount = 1000;
//     } else {
//         // –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ —á—Ç–æ-—Ç–æ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
//         bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–∏–Ω—Ç–æ–≤.');
//         return;
//     }

//     const player = await Player.findOne({ userId });
//     if (!player) {
//         bot.sendMessage(chatId, '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.');
//         return;
//     }

//     if (player.currentStep !== 'buy_points') {
//         // –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ —Ç–µ–∫—É—â–∏–π —à–∞–≥ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–∫—É–ø–∫–µ –ø–æ–∏–Ω—Ç–æ–≤
//         return;
//     }

//     // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∏–Ω—Ç–æ–≤ –∏–≥—Ä–æ–∫–∞
//     await Player.updateOne({ userId }, { $inc: { points: pointsAmount } });

//     // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
//     const updatedPlayer = await Player.findOne({ userId });

//     // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
//     bot.sendMessage(chatId, `–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ ${pointsAmount} –ø–æ–∏–Ω—Ç–æ–≤. –¢–µ–ø–µ—Ä—å —É –≤–∞—Å ${updatedPlayer.points} –ø–æ–∏–Ω—Ç–æ–≤.`);
// });

// function generateRoomId() {
//     const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
//     const length = 8;
//     let result = '';
//     for (let i = 0; i < length; i++) {
//         result += characters.charAt(Math.floor(Math.random() * characters.length));
//     }
//     return result;
// }



// bot.onText(/–ò–≥—Ä–∞—Ç—å/, async (msg) => {
//     const chatId = msg.chat.id;
//     const userId = msg.from.id;

//     const player = await Player.findOne({ userId });

//     const keyboard = {
//         reply_markup: {
//             keyboard: [
//                 ['–°—Ç–∞–≤–∫–∞ 10', '–°—Ç–∞–≤–∫–∞ 100', '–°—Ç–∞–≤–∫–∞ 500'],
//                 ['–ù–∞–∑–∞–¥']
//             ],
//             one_time_keyboard: false
//         }
//     };
//     bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', keyboard);

// });

// // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–≤–∫–∏
// bot.onText(/^(–°—Ç–∞–≤–∫–∞ 10|–°—Ç–∞–≤–∫–∞ 100|–°—Ç–∞–≤–∫–∞ 500)$/, async (msg, match) => {
//     const chatId = msg.chat.id;
//     const userId = msg.from.id;
//     const player = await Player.findOne({ userId });

//     if (!player) {
//         bot.sendMessage(chatId, '–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É —Å –∫–æ–º–∞–Ω–¥—ã /start.');
//         return;
//     }

//     const stakeText = match[1];
//     const stakeAmount = parseInt(stakeText.split(' ')[1]);

//     if (player.points < stakeAmount) {
//         bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–∏–Ω—Ç–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç–∞–≤–∫–∏.');
//         return;
//     }

//     const existingStake = player.stakes.find(stake => stake.stakeAmount === stakeAmount);
//     if (existingStake) {
//         bot.sendMessage(chatId, '–í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ —Å—Ç–∞–≤–∫—É –Ω–∞ –¥–∞–Ω–Ω—É—é —Å—É–º–º—É.');
//         return;
//     }

//     let room = await Room2.findOne({ stake: stakeAmount, availableSpots: { $gt: 0 } });

//     if (!room) {
//         room = new Room2({
//             roomId: generateRoomId(),
//             participants: [{ player: player._id, stakeAmount: stakeAmount }],
//             stake: stakeAmount,
//             availableSpots: 2,
//         });
//         await room.save();
//     } else {
//         room.participants.push({ player: player._id, stakeAmount: stakeAmount });
//         room.availableSpots -= 1;
//         await room.save();
//     }

//     player.stakes.push({
//         roomId: room._id,
//         stakeAmount: stakeAmount,
//     });

//     player.points -= stakeAmount;
//     await player.save();

//     bot.sendMessage(userId, `–° –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞ —Å–ø–∏—Å–∞–Ω–æ ${stakeAmount} –ø–æ–∏–Ω—Ç–æ–≤. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${player.points} –ø–æ–∏–Ω—Ç–æ–≤`);

//     const options = [
//         { text: '–ö–∞–º–µ–Ω—å', callback_data: `rock ${stakeAmount}` },
//         { text: '–ù–æ–∂–Ω–∏—Ü—ã', callback_data: `scissors ${stakeAmount}` },
//         { text: '–ë—É–º–∞–≥–∞', callback_data: `paper ${stakeAmount}` },
//     ];
//     const keyboard = {
//         inline_keyboard: [options],
//     };

//     bot.sendMessage(chatId, `–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å—Ç–∞–≤–∫—É ${stakeAmount} –ø–æ–∏–Ω—Ç–æ–≤. –û–∂–∏–¥–∞–µ–º –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤.`, { reply_markup: keyboard });
// });

// const axios = require('axios');

// async function servicecall(roomId, participants, stake, availableSpots) {
//     const token = '6612857955:AAECtQdvDf8DnsM5BmBRcIjamXmjGEaiffY'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
//     const chatId = '@wintechservice'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∏–º—è –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞

//     const message = `–ù–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\nID: ${roomId}\n–£—á–∞—Å—Ç–Ω–∏–∫–∏: ${participants}\n–°—Ç–∞–≤–∫–∞: ${stake}\n–°–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞: ${availableSpots}`;

//     const apiUrl = `https://api.telegram.org/bot${token}/sendMessage?chat_id=${chatId}`;


//     try {
//         const response = await axios.post(apiUrl, {
//             chat_id: chatId,
//             text: message
//         });

//         console.log('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', response.data);
//     } catch (error) {
//         console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
//     }
// }

// // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–∞ "–∫–∞–º–µ–Ω—å", "–Ω–æ–∂–Ω–∏—Ü—ã" –∏–ª–∏ "–±—É–º–∞–≥–∞"
// bot.on('callback_query', async (query) => {
//     const chatId = query.message.chat.id;
//     const userId = query.from.id;
//     const [choice, stake] = query.data.split(' ');

//     const player = await Player.findOne({ userId });

//     if (!player || !player.stakes.some(s => s.stakeAmount === parseInt(stake))) {
//         bot.sendMessage(chatId, '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –≤—ã–±–æ—Ä, —Ç–∞–∫ –∫–∞–∫ –Ω–µ —Å–¥–µ–ª–∞–ª–∏ —Å—Ç–∞–≤–∫—É.');
//         return;
//     }

//     const stakeObject = player.stakes.find(s => s.stakeAmount === parseInt(stake));
//     stakeObject.choice = choice;
//     await player.save();

//     bot.sendMessage(chatId, `–í—ã –≤—ã–±—Ä–∞–ª–∏: ${choice}. –û–∂–∏–¥–∞–µ–º –≤—ã–±–æ—Ä –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞...`);

//     const room = await Room2.findById(stakeObject.roomId);

//     const participantIndexInRoom = room.participants.findIndex(p => p.player.toString() === player._id.toString());
//     if (participantIndexInRoom !== -1) {
//         room.participants[participantIndexInRoom].choice = choice;
//         room.participants[participantIndexInRoom].nick = player.nick; // –î–æ–±–∞–≤–ª—è–µ–º nick –∏–∑ Player
//         await room.save();

//         // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—Ç
//         room.availableSpots -= 1;
//         await room.save();
//     } else {
//         console.log("–û—à–∏–±–∫–∞: –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–º–Ω–∞—Ç–µ.");
//     }


//     if (room.participants.every(p => p.stakeAmount && p.choice)) {
//         if (room.participants.length !== 2) {
//             bot.sendMessage(chatId, '–í –∫–æ–º–Ω–∞—Ç–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–≤–∞ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã.');
//             return;
//         }

//         const choices = room.participants.map(p => p.choice);

//         if (choices.includes(null)) {
//             bot.sendMessage(chatId, '–û–¥–∏–Ω –∏–∑ –∏–≥—Ä–æ–∫–æ–≤ –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–ª –≤—ã–±–æ—Ä. –û–∂–∏–¥–∞–µ–º...');
//             return;
//         }

//         let resultMessage = '';
//         let winningParticipantIndex;

//         if (choices[0] === choices[1]) {
//             resultMessage = '–ù–∏—á—å—è!';
//         } else if (
//             (choices[0] === 'rock' && choices[1] === 'scissors') ||
//             (choices[0] === 'scissors' && choices[1] === 'paper') ||
//             (choices[0] === 'paper' && choices[1] === 'rock')
//         ) {
//             resultMessage = `${room.participants[0].nick} –ø–æ–±–µ–¥–∏–ª!`; // –ò—Å–ø–æ–ª—å–∑—É–µ–º nick –∏–∑ Room2
//             winningParticipantIndex = 0;
//         } else {
//             resultMessage = `${room.participants[1].nick} –ø–æ–±–µ–¥–∏–ª!`; // –ò—Å–ø–æ–ª—å–∑—É–µ–º nick –∏–∑ Room2
//             winningParticipantIndex = 1;
//         }

//         for (const p of room.participants) {
//             const playerToUpdate = await Player.findById(p.player);
//             bot.sendMessage(playerToUpdate.userId, resultMessage);
//             playerToUpdate.choice = null;
//             await playerToUpdate.save();
//         }

//         if (winningParticipantIndex !== undefined) {
//             const winningPlayer = await Player.findById(room.participants[winningParticipantIndex].player);
//             if (winningPlayer) {
//                 winningPlayer.points += room.stake * 2;
//                 await winningPlayer.save();
//                 bot.sendMessage(winningPlayer.userId, `–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${room.stake * 2} –ø–æ–∏–Ω—Ç–æ–≤. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${winningPlayer.points} –ø–æ–∏–Ω—Ç–æ–≤`);

//                 // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
//                 await Winners.create({
//                     userId: winningPlayer.userId,
//                     nick: winningPlayer.nick,
//                     stakeAmount: room.stake,
//                 });
//                 // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç–µ –≤ –¥—Ä—É–≥–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª
//                 await servicecall(room._id, room.participants.map(p => p.nick), room.stake, room.availableSpots);
//             } else {
//                 console.error(`–û—à–∏–±–∫–∞: –ò–≥—Ä–æ–∫ —Å ID ${room.participants[winningParticipantIndex].player} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
//             }
//         }

//         // –ü–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –∫–æ–º–Ω–∞—Ç—ã
//         const roomToDelete = await Room2.findById(room._id);

//         // –û—á–∏—â–∞–µ–º —Å—Ç–∞–≤–∫–∏ —É –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–Ω–∞—Ç—ã
//         for (const participant of roomToDelete.participants) {
//             const playerToUpdate = await Player.findById(participant.player);
//             if (playerToUpdate) {
//                 const stakeIndex = playerToUpdate.stakes.findIndex(stake => stake.roomId.toString() === roomToDelete._id.toString());
//                 if (stakeIndex !== -1) {
//                     playerToUpdate.stakes.splice(stakeIndex, 1); // –£–¥–∞–ª—è–µ–º —Å—Ç–∞–≤–∫—É
//                     await playerToUpdate.save();
//                 }
//             }
//         }

//         // –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º —Å–∞–º—É –∫–æ–º–Ω–∞—Ç—É
//         await Room2.findByIdAndRemove(room._id);

//     } else {
//         const options = [
//             { text: '–ö–∞–º–µ–Ω—å', callback_data: `rock ${stake}` },
//             { text: '–ù–æ–∂–Ω–∏—Ü—ã', callback_data: `scissors ${stake}` },
//             { text: '–ë—É–º–∞–≥–∞', callback_data: `paper ${stake}` },
//         ];
//         const keyboard = {
//             inline_keyboard: [options],
//         };
//         bot.sendMessage(userId, '–í—ã –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–ª–∏ –≤—ã–±–æ—Ä. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:', { reply_markup: keyboard });
//     }
// });